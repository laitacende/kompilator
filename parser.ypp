%{
    #include <iostream>
    #include <string>
    #include <memory>
    #include <fstream>
    #include <stack>

    #include "./inc/IOOperations.hpp"
    #include "./inc/CodeGenerator.hpp"
    #include "./inc/Symbol.hpp"
    #include "./inc/Cond.hpp"

    extern int yylineno;
    extern int yylex();
    extern FILE *yyin;

    int yyerror(std::string s, int off);
    int yyerror(std::string s);

    std::shared_ptr<MemoryData> dataController = std::make_shared<MemoryData>();
    std::shared_ptr<CodeGenerator> codeGen = std::make_shared<CodeGenerator>(dataController);

    std::vector<std::string> newSet;
    bool error = false;
    long long int line = 0;
    std::stack<long long int> repeatStack;
    std::stack<Variable*> forStack;
    std::stack<long long int> forNowStack;
    std::stack<long long int> forModifyStack;
    std::stack<long long int> ifElseStack;
    bool isInIf = false;
%}

%define parse.error verbose

%union types {
    std::string* pidentifier;
    long long int num;
    Variable* var;
    Cond* cond;
}

%start program
%token BEGIN_ /* conflict with macro BEGIN in flex */
%token END
%token VAR
%token WRITE
%token READ
%token ASSIGN
%token PLUS
%token MINUS
%token TIMES
%token DIV
%token MOD
%token IF
%token THEN
%token ELSE
%token ENDIF
%token EQ
%token NEQ
%token GE
%token LE
%token LEQ
%token GEQ
%token WHILE
%token DO
%token ENDWHILE
%token REPEAT
%token UNTIL
%token FOR
%token FROM
%token TO
%token DOWNTO
%token ENDFOR
%token <num> num
%token <pidentifier> pidentifier
%token ERROR
%token <pidentifier> ERRORP

%type <var> value
%type <var> identifier
%type <var> expression
%type <cond> condition /* number of line of jump in code + type */
%%

program:    VAR declarations BEGIN_ commands END
            | BEGIN_ commands END

declarations: declarations',' pidentifier { Variable* v = codeGen->allocateVariable(*$3);
                                             if (nullptr == v) {
                                                error = true;
                                                yyerror("Redeclaration of variable " + *$3, 1);
                                                YYABORT;
                                             }
                                            }
              | pidentifier     { Variable* v = codeGen->allocateVariable(*$1);
                                    if (nullptr == v && !error) {
                                        error = true;
                                        yyerror("Redeclaration of variable " + *$1);
                                        YYABORT;
                                    }
                                }
             | pidentifier'['num':'num']'    { Variable* v = codeGen->allocateArray(*$1, $3, $5);
                                                if (nullptr == v && !error) {
                                                    error = true;
                                                    yyerror("Redeclaration of variable " + *$1);
                                                    YYABORT;
                                                }

                                                if (v->name == "error" && !error) {
                                                    error = true;
                                                    yyerror("Invalid range of array " + *$1);
                                                    YYABORT;
                                                }
                                             }
             | pidentifier'[''-'num':'num']'    { Variable* v = codeGen->allocateArray(*$1, -$4, $6);
                                                   if (nullptr == v && !error) {
                                                       error = true;
                                                       yyerror("Redeclaration of variable " + *$1);
                                                       YYABORT;
                                                   }

                                                   if (v->name == "error" && !error) {
                                                       error = true;
                                                       yyerror("Invalid range of array " + *$1);
                                                       YYABORT;
                                                   }
                                                }
             | pidentifier'['num':''-'num']'    { Variable* v = codeGen->allocateArray(*$1, $3, -$6);
                                                    if (nullptr == v && !error) {
                                                        error = true;
                                                        yyerror("Redeclaration of variable " + *$1);
                                                        YYABORT;
                                                    }

                                                    if (v->name == "error" && !error) {
                                                        error = true;
                                                        yyerror("Invalid range of array " + *$1);
                                                        YYABORT;
                                                    }
                                                 }
             | pidentifier'[''-'num':''-'num']'    { Variable* v = codeGen->allocateArray(*$1, -$4, -$7);
                                                 if (nullptr == v && !error) {
                                                     error = true;
                                                     yyerror("Redeclaration of variable " + *$1);
                                                     YYABORT;
                                                 }

                                                 if (v->name == "error" && !error) {
                                                     error = true;
                                                     yyerror("Invalid range of array " + *$1);
                                                     YYABORT;
                                                 }
                                              }

             | declarations',' pidentifier'[''-'num':'num']'  { Variable* v = codeGen->allocateArray(*$3, -$6, $8);
                                                               if (nullptr == v && !error) {
                                                                   error = true;
                                                                   yyerror("Redeclaration of variable " + *$3);
                                                                   YYABORT;
                                                               }

                                                               if (v->name == "error" && !error) {
                                                                   error = true;
                                                                   yyerror("Invalid range of array " + *$3);
                                                                   YYABORT;
                                                               }
                                                            }
             | declarations',' pidentifier'['num':''-'num']'  { Variable* v = codeGen->allocateArray(*$3, $5, -$8);
                                                                if (nullptr == v && !error) {
                                                                    error = true;
                                                                    yyerror("Redeclaration of variable " + *$3);
                                                                    YYABORT;
                                                                }

                                                                if (v->name == "error" && !error) {
                                                                    error = true;
                                                                    yyerror("Invalid range of array " + *$3);
                                                                    YYABORT;
                                                                }
                                                             }
             | declarations',' pidentifier'['num':'num']'  { Variable* v = codeGen->allocateArray(*$3, $5, $7);
                                                                 if (nullptr == v && !error) {
                                                                     error = true;
                                                                     yyerror("Redeclaration of variable " + *$3);
                                                                     YYABORT;
                                                                 }

                                                                 if (v->name == "error" && !error) {
                                                                     error = true;
                                                                     yyerror("Invalid range of array " + *$3);
                                                                     YYABORT;
                                                                 }
                                                              }
             | declarations',' pidentifier'[''-'num':''-'num']'  { Variable* v = codeGen->allocateArray(*$3, -$6, -$9);
                                                                  if (nullptr == v && !error) {
                                                                      error = true;
                                                                      yyerror("Redeclaration of variable " + *$3);
                                                                      YYABORT;
                                                                  }

                                                                  if (v->name == "error" && !error) {
                                                                      error = true;
                                                                      yyerror("Invalid range of array " + *$3);
                                                                      YYABORT;
                                                                  }
                                                               }
             | ERRORP {  error = true;
                         yyerror("Invalid string " + *$1);
                         YYABORT;
                       }
            | declarations','ERRORP { error = true;
                                      yyerror("Invalid string " + *$3);
                                      YYABORT;
                                     }



commands:   commands command
            | command

command:    WRITE value';' { if (!codeGen->write($2) && !error && !isInIf) {
                                error = true;
                                if ($2 != nullptr && !isInIf)
                                yyerror("Variable " + $2->name +" is not initialized");
                                YYABORT;
                              }

                            }

            | identifier ASSIGN expression';' { // don't modify iterators!!!
                                                if ($1->isIterator && !error) {
                                                    error = true;
                                                    yyerror("Modification of iterator " + $1->name +" not permitted");
                                                    YYABORT;
                                                } else {
                                                    codeGen->assignToVariable($1, $3);
                                                }
                                               }

            | READ identifier';'    {  if (!codeGen->read($2) && !error) {
                                        error = true;
                                      }
                                    }

            | condition THEN commands {  isInIf = true;
                                            line = codeGen->addInstruction("JUMP "); // omit else, edit later
                                            ifElseStack.push(line);
                                            if ($1->index != -1 && $1->type != "TRUE") { // if condition isn't always true
                                                std::string instr = codeGen->getInstruction($1->index);
                                                instr = instr + std::to_string(codeGen->offset - $1->index);
                                                codeGen->changeInstruction($1->index, instr); // go to else
                                                if ($1->type == "EQ" || $1->type == "LE" || $1->type == "GE") {
                                                    instr = codeGen->getInstruction($1->index - 1);
                                                    instr = instr + std::to_string(codeGen->offset - $1->index + 1);
                                                    codeGen->changeInstruction($1->index - 1, instr);
                                                }
                                            }
                                          }
              ELSE commands ENDIF        {
                                            line = ifElseStack.top();
                                            ifElseStack.pop();
                                            std::string instr = "JUMP " + std::to_string(codeGen->offset - line);
                                            codeGen->changeInstruction(line, instr); // edit instr from first block, jump after else
                                            isInIf = false;
                                         }
            | IF { isInIf = true; }
            | condition THEN commands {           if ($1->type == "FALSE") { // condition always false, just jump
                                                        std::string instr = codeGen->getInstruction($1->index);
                                                        instr = instr + std::to_string(codeGen->offset - $1->index);
                                                        codeGen->changeInstruction($1->index, instr);
                                                    } else if ($1->index != -1 && $1->type != "TRUE") { // if condition is always true then don't add any jump
                                                        std::string instr = codeGen->getInstruction($1->index); /* if EQ there are two jumps */
                                                        instr = instr + std::to_string(codeGen->offset - $1->index);
                                                        codeGen->changeInstruction($1->index, instr);
                                                        if ($1->type == "EQ" || $1->type == "LE" || $1->type == "GE") {
                                                            instr = codeGen->getInstruction($1->index - 1);
                                                            instr = instr + std::to_string(codeGen->offset - $1->index + 1);
                                                            codeGen->changeInstruction($1->index - 1, instr);
                                                        }
                                                    }
                                                }
             ENDIF                              { isInIf = false; }

            | WHILE condition DO commands ENDWHILE  { std::string instr = codeGen->getInstruction($2->index); /* if EQ there are two jumps */
                                                      instr = instr + std::to_string((codeGen->offset - $2->index + 1));
                                                      codeGen->changeInstruction($2->index, instr);
                                                      if ($2->type == "EQ" || $2->type == "LE" || $2->type == "GE") {
                                                          instr = codeGen->getInstruction($2->index - 1);
                                                          instr = instr + std::to_string((codeGen->offset - $2->index + 2));
                                                          codeGen->changeInstruction($2->index - 1, instr);
                                                      }
                                                      codeGen->addInstruction("JUMP -" + std::to_string((codeGen->offset - $2->firstIndex + 1)));
                                                     }

            | REPEAT { // push first instruction to stack
                        repeatStack.push(codeGen->offset);
                      }
            commands UNTIL condition';'   {    std::string instr = codeGen->getInstruction($5->index); /* if EQ there are two jumps */
                                               long long int firstLine = repeatStack.top();
                                               repeatStack.pop();
                                               instr = instr + std::to_string((-(codeGen->offset - firstLine - 1)));

                                               codeGen->changeInstruction($5->index, instr);
                                               if ($5->type == "EQ" || $5->type == "LE" || $5->type == "GE") {
                                                   instr = codeGen->getInstruction($5->index - 1);
                                                   instr = instr + std::to_string((-(codeGen->offset - firstLine - 2)));
                                                   codeGen->changeInstruction($5->index - 1, instr);
                                               }
                                           }

           | FOR  pidentifier FROM value TO value { // push first instruction to stack
                                                    // allocate iterator variable
                                                     Variable* var = codeGen->allocateIterator(*$2);
                                                     if (var == nullptr && !error) {
                                                        error = true;
                                                        yyerror("Iterator " + *$2 + " is already defined");
                                                        YYABORT;
                                                     }
                                                     // initialize iterator
                                                     codeGen->initializeIterator(var, $4 , $6);
                                                     long long int now = codeGen->offset;
                                                     forNowStack.push(now);
                                                     // generate code
                                                     long long int modify = codeGen->generateFor(var, $4 , $6, false);
                                                     forModifyStack.push(modify);
                                                     forStack.push(var);
                                                   }
            DO commands ENDFOR  {   Variable* var = forStack.top();
                                    forStack.pop();
                                    long long int modify = forModifyStack.top();
                                    forModifyStack.pop();
                                    long long int now = forNowStack.top();
                                    forNowStack.pop();
                                    codeGen->modifyIterator(var, false);
                                    if (modify != -1) {
                                        codeGen->addInstruction("JUMP -" + std::to_string((codeGen->offset - now)));
                                        std::string instr = codeGen->getInstruction(modify);
                                        instr = instr + std::to_string((codeGen->offset - modify));
                                        codeGen->changeInstruction(modify, instr);
                                    } else {
                                          // copy commands from index now to code->offset
                                          codeGen->unwindLoop(now, var);
                                    }
                                    //codeGen->eraseVariable(var->name);
                                    codeGen->restoreVariable(var->name);
                                }

            | FOR  pidentifier FROM value DOWNTO value { // push first instruction to stack
                                                               // allocate iterator variable
                                                                Variable* var = codeGen->allocateIterator(*$2);
                                                                if (var == nullptr && !error) {
                                                                   error = true;
                                                                   yyerror("Iterator " + *$2 + " is already defined");
                                                                   YYABORT;
                                                                }
                                                                // initialize iterator
                                                                codeGen->initializeIterator(var, $4 , $6);
                                                                long long int now = codeGen->offset;
                                                                forNowStack.push(now);
                                                                // generate code
                                                                long long int modify = codeGen->generateFor(var, $4, $6, true);

                                                                forModifyStack.push(modify);
                                                                forStack.push(var);
                                                              }
                       DO commands ENDFOR  {   Variable* var = forStack.top();
                                               forStack.pop();
                                               long long int modify = forModifyStack.top();
                                               forModifyStack.pop();
                                               long long int now = forNowStack.top();
                                               forNowStack.pop();
                                               codeGen->modifyIterator(var, true);
                                               if (modify != -1) { // don't unwind
                                                   codeGen->addInstruction("JUMP -" + std::to_string((codeGen->offset - now)));
                                                   std::string instr = codeGen->getInstruction(modify);
                                                   instr = instr + std::to_string((codeGen->offset - modify));
                                                   codeGen->changeInstruction(modify, instr);
                                               } else { // unwind loop, copy code
                                                    // copy commands from index now to code->offset
                                                    codeGen->unwindLoop(now, var);
                                               }
                                               //codeGen->eraseVariable(var->name);
                                               codeGen->restoreVariable(var->name);

                                           }




expression: value              { codeGen->loadVar($1); }
            | value PLUS value { codeGen->add($1, $3); }
            | value MINUS value { codeGen->subtract($1, $3); }
            | value TIMES value { codeGen->multiply($1, $3); }
            | value DIV value   { codeGen->divide($1, $3); }
            | value MOD value   { codeGen->modulo($1, $3); }

condition:  value NEQ value { $$ = codeGen->evalNotEqual($1, $3); }
            | value EQ value { $$ = codeGen->evalEqual($1, $3); }
            | value LE value { $$ = codeGen->evalLess($1, $3); }
            | value GE value { $$ = codeGen->evalGreater($1, $3); }
            | value LEQ value { $$ = codeGen->evalLessEqual($1, $3); }
            | value GEQ value { $$ = codeGen->evalGreaterEqual($1, $3); }

value:      identifier { $$ = $1;
                         if ($1 != nullptr && $1->isVariable && !isInIf && !$1->isInit && !error) {
                            error = true;
                            yyerror("Variable " + $1->name + " is not initialized");
                            YYABORT;
                         }
                        }
            | num { $$ = codeGen->allocateConstant($1);  } /* if it exists just return its address */
            | '-' num { $$ = codeGen->allocateConstantNegate($2); }

identifier:     pidentifier { Variable* var = codeGen->getVar(*$1);
                                if (var == nullptr && !error) {
                                    error = true;
                                    yyerror("Variable " + *$1 + " not defined");
                                    YYABORT;
                                   // $$ = nullptr;
                                 } else if (!var->isVariable) {
                                    error = true;
                                    yyerror("Invalid use of array variable " + *$1);
                                    YYABORT;
                                    //$$ = nullptr;
                                 } else {
                                    $$ = var;
                                 }
                            }
                | pidentifier'['num']' {  Variable* var = codeGen->getVar(*$1); // first index of table
                                          if (var == nullptr && !error) {
                                                yyerror("Variable " + *$1 + " not defined");
                                                YYABORT;
                                                $$ = nullptr;
                                          } else if (!var->isArray) {
                                                error = true;
                                                yyerror("Invalid use of variable " + *$1);
                                                YYABORT;
                                                //$$ = nullptr;
                                          } else {
                                            // get this variable with index
                                            Variable* var1 = codeGen->getVarArrayNum(var, $3);
                                            if (var1 == nullptr && !error) {
                                                error = true;
                                                yyerror("Index out of bounds for array " + *$1);
                                                YYABORT;
                                            } else {
                                                $$ = var1;
                                            }
                                          }
                                        }
                | pidentifier'[''-'num']' {  Variable* var = codeGen->getVar(*$1); // first index of table
                                            if (var == nullptr && !error) {
                                                  yyerror("Variable " + *$1 + " not defined");
                                                  YYABORT;
                                                  $$ = nullptr;
                                            } else if (!var->isArray) {
                                                  error = true;
                                                  yyerror("Invalid use of variable " + *$1);
                                                  YYABORT;
                                                  //$$ = nullptr;
                                            } else {
                                              // get this variable with index
                                              Variable* var1 = codeGen->getVarArrayNum(var, -$4);
                                              if (var1 == nullptr && !error) {
                                                  error = true;
                                                  yyerror("Index out of bounds for array " + *$1);
                                                  YYABORT;
                                              } else {
                                                  $$ = var1;
                                              }
                                            }
                                          }
                | pidentifier'['pidentifier']'  { // make new object variable with address of array and addres of variable
                                                     Variable* arr = codeGen->getVar(*$1); // first index of table
                                                     Variable* var = codeGen->getVar(*$3); // variable which is index of array now
                                                     if (arr == nullptr && !error) {
                                                           error = true;
                                                           yyerror("Variable " + *$1 + " not defined");
                                                           YYABORT;
                                                           //$$ = nullptr;
                                                     } else if (var == nullptr && !error) {
                                                            error = true;
                                                            yyerror("Variable " + *$3 + " not defined");
                                                            YYABORT;
                                                     } else if (!var->isVariable) {
                                                           error = true;
                                                           yyerror("Invalid use of variable " + *$3);
                                                           YYABORT;
                                                     } else if (!var->isInit && !isInIf) {
                                                        error = true;
                                                        yyerror("Variable " + var->name + " is not initialized");
                                                        YYABORT;
                                                     } else if (!arr->isArray) {
                                                        error = true;
                                                        yyerror("Invalid use of variable " + *$1);
                                                        YYABORT;
                                                     } else { // add to arr offset which is address of var

                                                       // arr->offset = var->address;
                                                       arr->offsetStack.push(var->address);
                                                        arr->isArrayWithVar = true;
                                                        $$ = arr;

                                                     }
                                                }
%%

int yyerror(std::string s) {
    error = true;
    std::cerr << "Error: " << s << " in line " << yylineno << std::endl;
    return 1;
}

int yyerror (std::string s, int off) {
    error = true;
    std::cerr << "Error: " << s << " in line " << yylineno - off << std::endl;
    return 1;
}

int main(int argc, char** argv) {
    // variable array

    std::shared_ptr<IOOperations> io = std::make_shared<IOOperations>(argc, argv);
    // read input file
    yyin = io->readCode();

    // check if file was read successfully
    if (yyin == nullptr) {
        return -1;
    }

    std::cout << "-------- ...Compiling... --------" << std::endl;

    yyparse();

    // error handling
    // write to file if no errors occurred
    codeGen->addInstruction("HALT");
    if (!error) {
        io->writeCode(codeGen->getCode());
        std::cout << "-------- Compilation successful --------" << std::endl;
    } else {
        std::cout << "-------- Compilation failed --------" << std::endl;
    }
    return 0;
}