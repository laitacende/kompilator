%{
    #include <iostream>
    #include <string>
    #include <memory>
    #include <fstream>

    #include "./inc/IOOperations.hpp"
    #include "./CodeGenerator.hpp"

    extern int yylineno;
    extern int yylex();
    extern FILE *yyin;

    int yyerror(std::string s);

    std::shared_ptr<MemoryData> dataController = std::make_shared<MemoryData>();
    std::shared_ptr<CodeGenerator> codeGen = std::make_shared<CodeGenerator>(dataController);

    std::vector<std::string> newSet;
%}

%union types {
    std::string* pidentifier;
    long long int num;
}

%start program
%token BEGIN_ /* conflict with macro BEGIN in flex */
%token END
%token VAR
%token WRITE
%token ASSIGN
%token <num> num
%token <pidentifier> pidentifier

%type <num> value
%type <num> identifier

%%

program:    VAR declarations BEGIN_ commands END
            | BEGIN_ commands END

declarations: declarations',' pidentifier { codeGen->allocateVariable(*$3); }
              | pidentifier     { codeGen->allocateVariable(*$1); }

commands:   commands command
            | command

command:    WRITE value';' { codeGen->write($2); }
            | identifier ASSIGN num';' { codeGen->assignToVariable($1, $3); }

value:      identifier  /*num { $$ = allocateConstant($1); }*/

identifier:     pidentifier { $$ = codeGen->getAddress(*$1); }

%%

int yyerror (std::string s) {
    std::cerr << "Error " << s << " in line " << yylineno - 1 << std::endl;
    return 0;
}

int main(int argc, char** argv) {
    // variable array

    std::shared_ptr<IOOperations> io = std::make_shared<IOOperations>(argc, argv);
    // read input file
    yyin = io->readCode();

    // check if file was read successfully
    if (yyin == nullptr) {
        return -1;
    }

    std::cout << "-------- ...Compiling... --------" << std::endl;

    yyparse();

    // error handling
    // write to file if no errors occured
    codeGen->addInstruction("HALT");
    io->writeCode(codeGen->getCode());
    std::cout << "-------- Compilation successfull --------" << std::endl;
    return 0;
}